---
import { Icon } from "astro-icon";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { FooterLink, NavItem } from "~/types";
import Logo from "~/components/logo.astro";

const navItems: Array<NavItem> = [
	{ title: "About", url: "#about" },
	{ title: "History", url: "#history" },
	{ title: "Sponsors", url: "#sponsors" },
	{ title: "FAQ", url: "#faq" },
];

const socialLinks: Array<FooterLink> = [
	{
		url: "mailto:chris@breadchris.com",
		description: "Email",
		icon: "mdi:email",
	},
	{
		url: "https://github.com/xctf-io",
		description: "Github",
		icon: "mdi:github",
	},
	{
		url: "https://discord.gg/bzRjJSFndW",
		description: "Discord",
		icon: "fa-brands:discord",
	},
];
---

<header
	id="page-header"
	class="absolute top-0 z-20 flex w-full items-center justify-between border-b-2 border-transparent px-5 sm:px-12 lg:px-24 py-6 ease-linear transition-all duration-250"
>
	<div class="flex items-center gap-0 xs:gap-4 sm:gap-8">
		<button
			id="open-nav-button"
			type="button"
			class="btn md:hidden"
			aria-label="Navigation"
		>
			<Icon pack="mdi" name="menu" class="h-8 w-8" />
		</button>
		<a class="hidden xs:inline relative hover:opacity-50" href="#">
			<Logo sizeAdjust />
		</a>
		<nav class="hidden md:block">
			<ul class="flex items-center gap-4 xs:gap-8">
				{
					navItems.map(({ title, url }) => (
						<li>
							<a class="hover:text-primary" href={url}>
								{title}
							</a>
						</li>
					))
				}
			</ul>
		</nav>
	</div>
	<a class="xs:hidden font-heading text-sm font-thin" href="#">
		MCPSHSF
	</a>
	<div>
		<div class="flex items-center xs:gap-6">
			<ThemeSwitcher />
			{
				socialLinks.map((link) => (
					<a
						class="h-6 hidden lg:block text-icon hover:text-primary"
						href={link.url}
					>
						<Icon class="h-full" name={link.icon} />
					</a>
				))
			}
			<a
				class="btn bg-button rounded-lg px-4 py-2 items-center gap-2 hover:bg-offset hidden xs:flex"
				aria-label="Sponsor Us"
				href="https://bank.hackclub.com/donations/start/mcps-hsf"
			>
				<span> Sponsor</span>
				<Icon class="h-6 text-red-500" name="mdi:heart" />
			</a>
		</div>
		<div id="menu-modal" class="modal hidden" aria-hidden="true">
			<div class="fixed inset-0 bg-default px-8 py-4 text-default">
				<div class="space-y-4" role="dialog" aria-modal="true">
					<header class="text-right">
						<button
							id="close-nav-button"
							type="button"
							class="btn"
							aria-label="Close navigation"
						>
							<Icon pack="mdi" name="close" class="h-8" />
						</button>
					</header>
					<div class="flex justify-center">
						<Logo />
					</div>
					<nav>
						<ul class="flex flex-col">
							{
								navItems.map(({ title, url }) => (
									<li>
										<a
											class="block py-4 text-center text-xl hover:text-primary"
											href={url}
										>
											{title}
										</a>
									</li>
								))
							}
						</ul>
					</nav>
				</div>
			</div>
		</div>
	</div>
</header>

<script>
	import MicroModal from "micromodal";
	import invariant from "tiny-invariant";

	const menuModalId = "menu-modal";

	const header = document.querySelector("#page-header") as HTMLElement;
	const page = document.documentElement;
	const menu = document.querySelector(`#${menuModalId} ul`);
	const openNavButton = document.querySelector("#open-nav-button");
	const closeNavButton = document.querySelector("#close-nav-button");

	invariant(header, "header should not be null");
	invariant(menu, "menu should not be null");
	invariant(openNavButton, "openNavButton should not be null");
	invariant(closeNavButton, "closeNavButton should not be null");

	const openMenu = () => {
		MicroModal.show(menuModalId, { disableScroll: true });
	};

	const closeMenu = () => {
		MicroModal.close(menuModalId);
	};

	openNavButton.addEventListener("click", openMenu);
	closeNavButton.addEventListener("click", closeMenu);

	var prevScrollPos = window.scrollY;

	document.addEventListener("scroll", () => {
		var currentScrollPos = window.scrollY;

		if (prevScrollPos <= currentScrollPos || currentScrollPos === 0) {
			header.classList.remove("fixed-header");
		} else {
			header.classList.add("fixed-header");
		}

		prevScrollPos = currentScrollPos;
	});

	menu.addEventListener("click", (event) => {
		if ((event.target as HTMLElement).tagName === "A") {
			closeMenu();
		}
	});
</script>

<noscript>
	<style>
		#open-nav-button {
			display: none;
		}
	</style>
</noscript>

<style>
	.fixed-header {
		@apply fixed top-0 bottom-auto;
		@apply border-default bg-default;
		animation: slideDown 0.25s linear;
	}
	.no-header {
		animation: slideUp 0.25s linear;
	}
	.modal.is-open {
		@apply block;
	}
	@keyframes slideDown {
		0% {
			transform: translateY(-100%);
		}
		100% {
			transform: translateY(0);
		}
	}
</style>
